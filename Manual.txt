Manual written by Sojin 2023.08.04 22:00
----------

sudo apt install net-tools

ifconfig (ens32 확인)
[VMware Edit > Virdual Network Editor] (DHCP Setting에서 starting ip 확인, NAT Setting에서 gateway ip 확인)

sudo vi /etc/netplan/01-netconfig.yaml

아래 내용 작성
'''
network:
  version: 2
  renderer: NetworkManager # 또는 'systemd-networkd'로 설정할 수 있습니다.
  ethernets:
    ens32:	
      addresses:
        - starting ip/24
      gateway4: gateway ip
      nameservers:
        addresses:
          - [8.8.8.8, 8.8.4.4]
'''

sudo netplan apply

[VMware NAT Setting 포워딩, 공유기 포워딩, 인바운드 규칙 설정]  -> SSH 클라이언트 활용 가능

ex) SSH : 외부IP:10022 > 내부IP:10022 > 우분투고정IP:22

sudo apt update

아래 주소를 참고하여 Docker 설치
https://docs.docker.com/engine/install/ubuntu/

sudo apt update
sudo apt install nginx
sudo systemctl start nginx
sudo systemctl enable nginx

sudo apt update
sudo apt install -y openjdk-17-jdk
sudo update-java-alternatives -s java-1.17.0-openjdk-amd64

아래 주소를 참고하여 jenkins 설치
https://www.jenkins.io/doc/book/installing/linux/#debianubuntu

sudo systemctl start jenkins
sudo systemctl enable jenkins

sudo vi /etc/default/jenkins (포트 변경을 했으나 적용이 안됨)
->
sudo vi /usr/lib/systemd/system/jenkins.service (포트변경 후 아래 절차 진행)
sudo systemctl daemon-reload
sudo systemctl start jenkins.service
sudo systemctl restart jenkins

sudo usermod -aG sudo jenkins (기존에는 잘 되었으나 이번에는 설정이 안됨)
sudo systemctl restart jenkins
->
sudo chmod 666 /var/run/docker.sock
(/var/run/docker.sock 파일의 권한을 666으로 변경해서 그룹 내 다른 사용자도 접근 가능하게 변경하여 해결)

필요한 젠킨스 플러그인을 설치
ex) Webhook Trigger, NodeJS

Jenkins 관리 > Tools > NodeJS, Gradle, JDK

NodeJS :
Name, Version 확인 후 Install automatically 체크 (Name 값은 추후 pipeline script의 tools 블럭의 값과 일치시켜주어야 함)

Gradle : 
name, version 확인 후 Install automatically 체크 (프로젝트 내에서 gradle/wrapper 경로에 들어가서 gradle-wrapper.properties -> Gradle 버전 확인 가능)

JDK : 
Name, JAVA_HOME 확인 ( sudo update-java-alternatives --list 를 통해 JAVA_HOME의 경로를 확인할 수 있음)

젠킨스 새 아이템(pipeline) 생성 후 GitHub hook trigger for GITScm polling 체크, 스크립트에 아래 코드 작성
'''
pipeline {
    agent any
    
    tools {
        nodejs 'nodejs-18.16.0'
        jdk 'jdk-17'
        gradle 'gradle-8.0'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/tail-s/web_practice_3.git'
            }
        }
        
        stage('Backend Build') {
            steps {
                dir('Backend/jes') {
                    sh 'gradle clean build'
                }
            }
        }

        stage('Frontend Build') {
            steps {
                dir('Frontend/jes') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }
        
        stage('Docker Build and Deploy Backend') {
            environment {
                IMAGE_NAME = 'backend'
                CONTAINER_NAME = 'backend-container'
            }
            steps {
                // 이전 컨테이너 중지 및 삭제
                sh "docker stop backend-container || true"
                sh "docker rm backend-container || true"

                script {
                    def buildOutput = sh script: "docker build -t backend ./Backend/jes", returnStatus: true
                    if (buildOutput == 0) {
                        // 빌드가 성공한 경우에만 <none> 태그를 가진 이미지 삭제
                        sh "docker images | grep '<none>' | awk '{print \$3}' | xargs -r docker rmi || true"
                    } else {
                        error "Docker build failed!"
                    }
                }
                // 새로운 컨테이너 시작
                sh "docker run -d -p 8080:8080 --name backend-container backend"
            }
        }

        stage('Docker Build and Deploy Frontend') {
            environment {
                IMAGE_NAME = 'frontend'
                CONTAINER_NAME = 'frontend-container'
            }
            steps {
                // 이전 컨테이너 중지 및 삭제
                sh "docker stop frontend-container || true"
                sh "docker rm frontend-container || true"

                // 이미지 빌드
                script {
                    def buildOutput = sh script: "docker build -t frontend ./Frontend/jes", returnStatus: true
                    if (buildOutput == 0) {
                        // 빌드가 성공한 경우에만 <none> 태그를 가진 이미지 삭제
                        sh "docker images | grep '<none>' | awk '{print \$3}' | xargs -r docker rmi || true"
                    } else {
                        error "Docker build failed!"
                    }
                }

                // 새로운 컨테이너 시작
                sh "docker run -d -p 3000:3000 --name frontend-container frontend"
            }
        }
        
        stage('Docker Build and Deploy MySQL') {
            environment {
                MYSQL_ROOT_PASSWORD = 'root'
            }
            steps {
                sh "docker stop mysql-container || true"
                sh "docker rm mysql-container || true"
                sh "docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} --name mysql-container mysql:8.0.26"
                sleep 15
                sh "docker exec -i mysql-container mysql -uroot -p${MYSQL_ROOT_PASSWORD} -e 'CREATE DATABASE JES;'"
            }
        }
    }
}
'''

Github repository > Settings > Webhooks > Add webhook

Payload URL : http://[외부IP]:19090/github-webhook/
Content type : appliation/json

세팅 후 Add webhook

첫 빌드는 수동 빌드해야 함

가상화 서버로 포워딩 때문에 80번 포트를 비워둘 수가 없기 때문에 HTTP 기반의 웹 서버가 아닌 DNS 레코드로 인증 시도

sudo certbot certonly --manual -d sojin.ddns.net --preferred-challenges dns

Next.JS 기반 Frontend 프로젝트의 next.config.js에 다음 내용 추가
'''
const isProd = process.env.NODE_ENV === 'production';

module.exports = {
    assetPrefix: isProd ? 'http://[외부IP]:13000' : '',
};
'''
이후
sudo vi /etc/nginx/sites-available/default
에서 다음 내용으로 수정
'''
server {
        listen 80;
        server_name jes.ddns.net;

        location / {
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_pass http://localhost:3000;
        }

        location /api {
                proxy_set_header Host $host;
                proxy_pass http://localhost:8080;
        }

        location ~* \.(?:css|js|png|jpg|jpeg|gif|ico|woff|woff2|ttf|otf|svg)$ {
                alias /var/www/html;
        }
}
'''

했으나, 폰트 관련 CORS 오류 및 다른 네트워크에서 80포트 메인페이지 접속이 안되는 부분 해결 중
NGINX 오류로 예상, 우선 NGINX 삭제 후 DNS 서비스에서 프론트 컨테이너로 리타이렉트 해주는 기능을 사용하면서,
API는 IP주소를 직접 사용하는 방식으로 개발 진행 결정... 추후 보완 예정


